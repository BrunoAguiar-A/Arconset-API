# üìÅ main.py - VERS√ÉO PRODU√á√ÉO DEFINITIVA COM UPLOAD FUNCIONAL GARANTIDO - CORRIGIDO
from flask import Flask, jsonify, request, send_file, make_response
from flask_cors import CORS
from database import SessionLocal, Base, engine, get_db
import os
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from datetime import datetime, UTC

# ===== IMPORTA√á√ïES PARA UPLOAD (ADICIONADAS) =====
from werkzeug.utils import secure_filename
from werkzeug.datastructures import FileStorage
import uuid
import mimetypes

# Importar todos os modelos (incluindo o novo User)
from database import Cliente, Projeto, Funcionario, Conta, Arquivo, Notificacao
from models.user import User

# ===== CONFIGURA√á√ÉO DE MODO PRODU√á√ÉO =====
PRODUCTION_MODE = True  # üö® FOR√áADO PARA PRODU√á√ÉO
DEVELOPMENT_MODE = os.getenv('DEBUG', 'False').lower() == 'true'
REQUIRE_SECURITY = os.getenv('REQUIRE_SECURITY', 'True').lower() == 'true'

# üö® OVERRIDE: Se n√£o for desenvolvimento expl√≠cito, √© produ√ß√£o
if not DEVELOPMENT_MODE:
    PRODUCTION_MODE = True

print(f"üöÄ MODO PRODU√á√ÉO: {'SIM' if PRODUCTION_MODE else 'N√ÉO'}")
print(f"üîß Modo desenvolvimento: {'SIM' if DEVELOPMENT_MODE else 'N√ÉO'}")
print(f"üîê Seguran√ßa obrigat√≥ria: {'SIM' if REQUIRE_SECURITY else 'N√ÉO'}")

# ===== IMPORTAR SEGURAN√áA OTIMIZADA =====
HAS_SECURITY = False
security_manager = None
bank_bp = None
webhook_bp = None

try:
    print("üîç Importando middleware.security...")
    from middleware.security import setup_simple_cors, security_manager
    print("‚úÖ middleware.security importado com sucesso")
    
    if security_manager:
        print("‚úÖ SimpleSecurityManager ativo")
        HAS_SECURITY = True
    else:
        print("‚ùå SecurityManager n√£o inicializado")
        if REQUIRE_SECURITY and PRODUCTION_MODE:
            print("üö® ERRO CR√çTICO: Produ√ß√£o requer seguran√ßa ativa!")
            sys.exit(1)
    
    # Import rotas banc√°rias
    try:
        print("üîç Importando routes.bank_routes...")
        from routes.bank_routes import bank_bp
        print("‚úÖ routes.bank_routes importado com sucesso")
    except ImportError as e:
        print(f"‚ö†Ô∏è  routes.bank_routes n√£o encontrado: {e}")
        if REQUIRE_SECURITY and PRODUCTION_MODE:
            print("üö® ERRO CR√çTICO: Rotas banc√°rias s√£o obrigat√≥rias em produ√ß√£o!")
            sys.exit(1)
    
    try:
        print("üîç Importando routes.webhook_receiver...")
        from routes.webhook_receiver import webhook_bp
        print("‚úÖ routes.webhook_receiver importado com sucesso")
    except ImportError as e:
        print(f"‚ö†Ô∏è  routes.webhook_receiver n√£o encontrado: {e}")
        
except ImportError as e:
    error_msg = f"ERRO ao importar seguran√ßa: {e}"
    print(f"‚ùå {error_msg}")
    
    if REQUIRE_SECURITY and PRODUCTION_MODE:
        print("üö® ERRO CR√çTICO: Produ√ß√£o n√£o pode iniciar sem seguran√ßa!")
        print("üõ†Ô∏è  Solu√ß√µes para PRODU√á√ÉO:")
        print("   1. Configurar todas as vari√°veis de ambiente (.env)")
        print("   2. Iniciar Redis: docker run -d --name redis -p 6379:6379 redis:alpine")
        print("   3. Instalar depend√™ncias: pip install redis cryptography")
        sys.exit(1)
    else:
        print("‚ö†Ô∏è  Continuando sem seguran√ßa avan√ßada")

# ===== IMPORTAR AUTENTICA√á√ÉO OBRIGAT√ìRIA =====
HAS_AUTH = False
auth_bp = None
initialize_auth_system = None

try:
    print("üîç Importando sistema de autentica√ß√£o...")
    from routes.auth import auth_bp
    
    try:
        from middleware.auth_middleware import initialize_auth_system
    except ImportError:
        print("‚ö†Ô∏è  middleware.auth_middleware n√£o encontrado - usando vers√£o b√°sica")
        initialize_auth_system = None
    
    print("‚úÖ Sistema de autentica√ß√£o importado com sucesso")
    HAS_AUTH = True
except ImportError as e:
    print(f"‚ùå Erro ao importar autentica√ß√£o: {e}")
    if PRODUCTION_MODE:
        print("üö® ERRO CR√çTICO: Produ√ß√£o requer autentica√ß√£o!")
        sys.exit(1)
    print("‚ö†Ô∏è Sistema funcionar√° SEM autentica√ß√£o")

# ===== IMPORTAR BLUEPRINTS ESSENCIAIS =====
# üö® CR√çTICO: Sistema de arquivos (UPLOAD) - AGORA COM FALLBACK
try:
    from routes.arquivos import arquivos_bp
    HAS_ARQUIVOS_BP = True
    print("‚úÖ routes.arquivos importado - UPLOAD FUNCIONAR√Å")
except ImportError as e:
    HAS_ARQUIVOS_BP = False
    print(f"‚ùå routes.arquivos N√ÉO encontrado: {e}")
    print("üîß USANDO FIX DIRETO - Upload funcionar√° mesmo assim!")

# Outros blueprints
try:
    from routes.project import project_bp
    HAS_PROJECT_BP = True
except ImportError:
    HAS_PROJECT_BP = False
    print("‚ö†Ô∏è  routes.project n√£o encontrado")

try:
    from routes.clientes import clientes_bp
    HAS_CLIENTES_BP = True
except ImportError:
    HAS_CLIENTES_BP = False
    print("‚ö†Ô∏è  routes.clientes n√£o encontrado")

try:
    from routes.contas import contas_bp
    HAS_CONTAS_BP = True
except ImportError:
    HAS_CONTAS_BP = False
    print("‚ö†Ô∏è  routes.contas n√£o encontrado")

try:
    from routes.funcionarios import funcionarios_bp
    HAS_FUNCIONARIOS_BP = True
except ImportError:
    HAS_FUNCIONARIOS_BP = False
    print("‚ö†Ô∏è  routes.funcionarios n√£o encontrado")

try:
    from routes.dashboard import dashboard_bp
    HAS_DASHBOARD_BP = True
except ImportError:
    HAS_DASHBOARD_BP = False
    print("‚ö†Ô∏è  routes.dashboard n√£o encontrado")

# User Settings Blueprint
HAS_USER_SETTINGS_BP = False
user_settings_bp = None
UserSettings = None
initialize_user_settings_system = None

try:
    print("üîç Importando routes.user_settings...")
    from models.user_settings import user_settings_bp
    HAS_USER_SETTINGS_BP = True
    print("‚úÖ routes.user_settings importado com sucesso")
except ImportError as e:
    HAS_USER_SETTINGS_BP = False
    print(f"‚ùå routes.user_settings n√£o encontrado: {e}")

# ===== FIX DE UPLOAD DIRETO =====
def setup_upload_routes_fix(app):
    """FIX: Rotas de upload diretas integradas no main.py"""
    
    print("üîß Configurando rotas de upload diretas (FIX)...")
    
    UPLOAD_FOLDER = app.config.get('UPLOAD_FOLDER', 'uploads')
    MAX_FILE_SIZE = 100 * 1024 * 1024  # 100MB
    ALLOWED_EXTENSIONS = {
        '.pdf', '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx',
        '.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff',
        '.dwg', '.dxf', '.skp', '.rvt', '.zip', '.rar', '.7z', '.txt', '.csv'
    }
    
    def allowed_file(filename):
        return '.' in filename and os.path.splitext(filename)[1].lower() in ALLOWED_EXTENSIONS
    
    def check_auth():
        """Verifica√ß√£o b√°sica de autentica√ß√£o - CORRIGIDA"""
        try:
            auth_header = request.headers.get('Authorization', '')
            
            if not auth_header:
                print("‚ùå Nenhum header Authorization encontrado")
                return False, jsonify({'success': False, 'error': 'Token de autentica√ß√£o requerido'}), 401
            
            if not auth_header.startswith('Bearer '):
                print("‚ùå Formato de token inv√°lido")
                return False, jsonify({'success': False, 'error': 'Formato de token inv√°lido. Use: Bearer <token>'}), 401
            
            token = auth_header.split(' ')[1]
            print(f"üîç Token recebido: {token[:20]}...")
            
            # Verificar token usando sistema dispon√≠vel
            if security_manager:
                try:
                    payload = security_manager.verify_jwt_token(token)
                    if payload and 'user_id' in payload:
                        print(f"‚úÖ Token v√°lido para usu√°rio: {payload.get('user_id')}")
                        return True, None, None
                    else:
                        print("‚ùå Payload inv√°lido")
                        return False, jsonify({'success': False, 'error': 'Token inv√°lido'}), 401
                except Exception as e:
                    print(f"‚ùå Erro no security_manager: {e}")
                    return False, jsonify({'success': False, 'error': 'Erro na verifica√ß√£o do token'}), 401
            else:
                # Verifica√ß√£o b√°sica JWT
                try:
                    import jwt
                    payload = jwt.decode(token, app.config['JWT_SECRET'], algorithms=['HS256'])
                    if payload and 'user_id' in payload:
                        print(f"‚úÖ Token JWT b√°sico v√°lido para usu√°rio: {payload.get('user_id')}")
                        return True, None, None
                    else:
                        return False, jsonify({'success': False, 'error': 'Payload do token inv√°lido'}), 401
                except jwt.ExpiredSignatureError:
                    print("‚ùå Token expirado")
                    return False, jsonify({'success': False, 'error': 'Token expirado'}), 401
                except jwt.InvalidTokenError as e:
                    print(f"‚ùå Token inv√°lido: {e}")
                    return False, jsonify({'success': False, 'error': 'Token inv√°lido'}), 401
        except Exception as e:
            print(f"‚ùå Erro geral na autentica√ß√£o: {e}")
            return False, jsonify({'success': False, 'error': 'Erro interno na autentica√ß√£o'}), 500
    
    # üö® ROTA DE TESTE SEM DUPLICA√á√ÉO - Apenas se n√£o existe blueprint
    if not HAS_ARQUIVOS_BP:
        @app.route('/api/arquivos/test', methods=['GET'])
        def test_arquivos_fix():
            """Teste das rotas de arquivos (FIX)"""
            return jsonify({
                'success': True,
                'message': 'üîß ROTAS DE UPLOAD ATIVAS (FIX DIRETO)',
                'upload_folder': UPLOAD_FOLDER,
                'max_size_mb': MAX_FILE_SIZE // (1024 * 1024),
                'folder_exists': os.path.exists(UPLOAD_FOLDER),
                'allowed_extensions': list(ALLOWED_EXTENSIONS),
                'blueprint_available': HAS_ARQUIVOS_BP,
                'fix_active': True,
                'routes': [
                    'GET /api/arquivos/test',
                    'POST /api/arquivos/upload',
                    'GET /api/arquivos',
                    'DELETE /api/arquivos/<id>',
                    'GET /api/arquivos/<id>/download'
                ]
            })
    
    # üö® ROTAS APENAS SE N√ÉO EXISTE BLUEPRINT (evitar duplica√ß√£o)
    if not HAS_ARQUIVOS_BP:
        @app.route('/api/arquivos/upload', methods=['POST'])
        def upload_arquivo_fix():
            """Upload de arquivo - FIX DIRETO"""
            try:
                print(f"üì§ UPLOAD FIX - Recebido: {request.content_type}")
                print(f"üì§ Files: {list(request.files.keys())}")
                print(f"üì§ Form: {list(request.form.keys())}")
                
                # Verificar autentica√ß√£o
                auth_ok, auth_response, auth_code = check_auth()
                if not auth_ok:
                    return auth_response, auth_code
                
                # Verificar arquivo
                if 'file' not in request.files:
                    return jsonify({
                        'success': False,
                        'error': 'Nenhum arquivo enviado'
                    }), 400
                
                file = request.files['file']
                if not file.filename:
                    return jsonify({
                        'success': False,
                        'error': 'Nenhum arquivo selecionado'
                    }), 400
                
                print(f"üì§ Arquivo recebido: {file.filename} ({file.content_type})")
                
                # Verificar tamanho
                file.seek(0, 2)
                file_size = file.tell()
                file.seek(0)
                
                if file_size > MAX_FILE_SIZE:
                    return jsonify({
                        'success': False,
                        'error': f'Arquivo muito grande. M√°ximo: {MAX_FILE_SIZE // (1024*1024)}MB'
                    }), 400
                
                # Verificar extens√£o
                if not allowed_file(file.filename):
                    return jsonify({
                        'success': False,
                        'error': 'Tipo de arquivo n√£o permitido'
                    }), 400
                
                # Criar pasta se n√£o existir
                os.makedirs(UPLOAD_FOLDER, exist_ok=True)
                
                # Nome √∫nico para o arquivo
                filename = secure_filename(file.filename)
                unique_filename = f"{uuid.uuid4().hex}_{filename}"
                file_path = os.path.join(UPLOAD_FOLDER, unique_filename)
                
                # Salvar arquivo
                file.save(file_path)
                print(f"üì§ SUCESSO: Arquivo salvo em {file_path}")
                
                # Dados do formul√°rio - CORRIGIDO para aceitar ambos os formatos
                projeto_id = request.form.get('projectId') or request.form.get('projeto_id')
                descricao = request.form.get('description', '') or request.form.get('descricao', '')
                tipo_documento = request.form.get('fileType', 'Geral') or request.form.get('tipo_documento', 'Geral')
                
                # Tentar salvar no banco de dados
                try:
                    db = SessionLocal()
                    try:
                        novo_arquivo = Arquivo(
                            nome_original=file.filename,
                            nome_arquivo=unique_filename,
                            caminho=file_path,
                            tamanho=file_size,
                            tipo_mime=file.content_type or 'application/octet-stream',
                            tipo_documento=tipo_documento,
                            projeto_id=int(projeto_id) if projeto_id else None,
                            descricao=descricao,
                            created_at=datetime.now(UTC)
                        )
                        
                        db.add(novo_arquivo)
                        db.commit()
                        db.refresh(novo_arquivo)
                        
                        print(f"üì§ Banco: Arquivo salvo com ID {novo_arquivo.id}")
                        
                        return jsonify({
                            'success': True,
                            'message': 'Arquivo enviado com sucesso (FIX DIRETO)',
                            'storage': 'local',
                            'method': 'direct_fix',
                            'data': novo_arquivo.to_dict()
                        })
                        
                    except Exception as db_error:
                        db.rollback()
                        print(f"‚ùå Erro no banco: {db_error}")
                        
                        # Arquivo foi salvo, retornar sucesso mesmo com erro no banco
                        return jsonify({
                            'success': True,
                            'message': 'Arquivo salvo localmente (banco com problema)',
                            'storage': 'local',
                            'method': 'direct_fix',
                            'data': {
                                'id': int(file_size % 10000),
                                'name': file.filename,
                                'fileName': file.filename,
                                'nome_original': file.filename,
                                'size': file_size,
                                'fileSize': file_size,
                                'type': file.content_type,
                                'caminho': file_path,
                                'created_at': datetime.now(UTC).isoformat(),
                                'uploadDate': datetime.now(UTC).isoformat()
                            },
                            'warning': 'Arquivo salvo mas banco indispon√≠vel'
                        })
                    finally:
                        db.close()
                        
                except Exception as e:
                    print(f"‚ùå Banco indispon√≠vel: {e}")
                    
                    # Mesmo com erro no banco, arquivo foi salvo
                    return jsonify({
                        'success': True,
                        'message': 'Arquivo salvo (banco indispon√≠vel)',
                        'storage': 'local',
                        'method': 'direct_fix',
                        'data': {
                            'id': int(file_size % 10000),
                            'name': file.filename,
                            'fileName': file.filename,
                            'nome_original': file.filename,
                            'size': file_size,
                            'fileSize': file_size,
                            'type': file.content_type,
                            'caminho': file_path,
                            'created_at': datetime.now(UTC).isoformat(),
                            'uploadDate': datetime.now(UTC).isoformat()
                        }
                    })
                    
            except Exception as e:
                print(f"‚ùå Erro geral no upload: {e}")
                return jsonify({
                    'success': False,
                    'error': f'Erro interno: {str(e)}'
                }), 500
        
        @app.route('/api/arquivos', methods=['GET'])
        def listar_arquivos_fix():
            """Listar arquivos - FIX DIRETO"""
            try:
                # Verificar autentica√ß√£o
                auth_ok, auth_response, auth_code = check_auth()
                if not auth_ok:
                    return auth_response, auth_code
                
                # Tentar do banco primeiro
                try:
                    db = SessionLocal()
                    try:
                        arquivos = db.query(Arquivo).order_by(Arquivo.created_at.desc()).limit(100).all()
                        
                        return jsonify({
                            'success': True,
                            'data': [arquivo.to_dict() for arquivo in arquivos],
                            'total': len(arquivos),
                            'source': 'database',
                            'method': 'direct_fix'
                        })
                    finally:
                        db.close()
                        
                except Exception as db_error:
                    print(f"‚ùå Erro no banco ao listar: {db_error}")
                    
                    # Fallback: listar da pasta
                    files = []
                    if os.path.exists(UPLOAD_FOLDER):
                        for filename in os.listdir(UPLOAD_FOLDER):
                            filepath = os.path.join(UPLOAD_FOLDER, filename)
                            if os.path.isfile(filepath):
                                stat = os.stat(filepath)
                                mime_type = mimetypes.guess_type(filename)[0] or 'application/octet-stream'
                                
                                files.append({
                                    'id': hash(filename) % 10000,
                                    'name': filename,
                                    'fileName': filename,
                                    'nome_original': filename,
                                    'size': stat.st_size,
                                    'fileSize': stat.st_size,
                                    'type': mime_type,
                                    'caminho': filepath,
                                    'created_at': datetime.fromtimestamp(stat.st_ctime).isoformat(),
                                    'uploadDate': datetime.fromtimestamp(stat.st_ctime).isoformat()
                                })
                    
                    return jsonify({
                        'success': True,
                        'data': files,
                        'total': len(files),
                        'source': 'filesystem',
                        'method': 'direct_fix'
                    })
                    
            except Exception as e:
                return jsonify({
                    'success': False,
                    'error': f'Erro interno: {str(e)}'
                }), 500
        
        @app.route('/api/arquivos/<int:arquivo_id>', methods=['DELETE'])
        def deletar_arquivo_fix(arquivo_id):
            """Deletar arquivo - FIX DIRETO"""
            try:
                # Verificar autentica√ß√£o
                auth_ok, auth_response, auth_code = check_auth()
                if not auth_ok:
                    return auth_response, auth_code
                
                db = SessionLocal()
                try:
                    arquivo = db.query(Arquivo).filter(Arquivo.id == arquivo_id).first()
                    
                    if not arquivo:
                        return jsonify({
                            'success': False,
                            'error': 'Arquivo n√£o encontrado'
                        }), 404
                    
                    # Deletar arquivo f√≠sico
                    if arquivo.caminho and os.path.exists(arquivo.caminho):
                        os.remove(arquivo.caminho)
                        print(f"üóëÔ∏è Arquivo f√≠sico deletado: {arquivo.caminho}")
                    
                    # Deletar do banco
                    db.delete(arquivo)
                    db.commit()
                    
                    return jsonify({
                        'success': True,
                        'message': 'Arquivo deletado com sucesso',
                        'method': 'direct_fix'
                    })
                    
                except Exception as db_error:
                    db.rollback()
                    raise db_error
                finally:
                    db.close()
                    
            except Exception as e:
                return jsonify({
                    'success': False,
                    'error': f'Erro interno: {str(e)}'
                }), 500
        
        @app.route('/api/arquivos/<int:arquivo_id>/download', methods=['GET'])
        def download_arquivo_fix(arquivo_id):
            """Download de arquivo - FIX DIRETO"""
            try:
                # Verificar autentica√ß√£o
                auth_ok, auth_response, auth_code = check_auth()
                if not auth_ok:
                    return auth_response, auth_code
                
                db = SessionLocal()
                try:
                    arquivo = db.query(Arquivo).filter(Arquivo.id == arquivo_id).first()
                    
                    if not arquivo:
                        return jsonify({
                            'success': False,
                            'error': 'Arquivo n√£o encontrado'
                        }), 404
                    
                    # Arquivo local
                    if arquivo.caminho and os.path.exists(arquivo.caminho):
                        return send_file(
                            arquivo.caminho,
                            as_attachment=True,
                            download_name=arquivo.nome_original
                        )
                    else:
                        return jsonify({
                            'success': False,
                            'error': 'Arquivo n√£o encontrado no disco'
                        }), 404
                        
                finally:
                    db.close()
                    
            except Exception as e:
                return jsonify({
                    'success': False,
                    'error': f'Erro interno: {str(e)}'
                }), 500
    
    print("‚úÖ Rotas de upload FIX configuradas com sucesso!")

# ===== CRIAR USU√ÅRIO ADMIN PADR√ÉO =====
def create_default_admin():
    """Criar usu√°rio admin padr√£o se n√£o existir"""
    try:
        db = SessionLocal()
        try:
            # Verificar se j√° existe admin
            admin_exists = db.query(User).filter(User.role == 'admin').first()
            if admin_exists:
                print(f"‚úÖ Usu√°rio admin j√° existe: {admin_exists.username}")
                return True
            
            # Criar usu√°rio admin PARA PRODU√á√ÉO
            admin_user = User(
                username='admin',
                email='admin@hvac.com.br',
                full_name='Administrador do Sistema HVAC',
                role='admin',
                is_active=True,
                is_verified=True,
                department='Administra√ß√£o',
                position='Administrador Geral'
            )
            
            # Senha FORTE para produ√ß√£o
            admin_password = os.getenv('ADMIN_PASSWORD', 'HvacAdmin2024!')
            admin_user.set_password(admin_password)
            
            db.add(admin_user)
            db.commit()
            
            print("üë§ Usu√°rio admin criado para PRODU√á√ÉO:")
            print(f"   Username: admin")
            print(f"   Password: {admin_password}")
            print(f"   Email: admin@hvac.com.br")
            print("üîê IMPORTANTE: Altere a senha ap√≥s primeiro login!")
            
            return True
            
        finally:
            db.close()
            
    except Exception as e:
        print(f"‚ùå Erro ao criar usu√°rio admin: {e}")
        return False

# ===== VALIDA√á√ïES CR√çTICAS DE PRODU√á√ÉO =====
if PRODUCTION_MODE:
    print("üîç Executando valida√ß√µes de PRODU√á√ÉO...")
    
    # Validar vari√°veis cr√≠ticas
    critical_vars = ['JWT_SECRET']
    missing_vars = [var for var in critical_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"üö® FALHA CR√çTICA: Vari√°veis obrigat√≥rias n√£o definidas: {missing_vars}")
        print("üõ†Ô∏è  SOLU√á√ÉO:")
        print("   1. Crie arquivo .env na raiz do projeto")
        print("   2. Adicione: JWT_SECRET=sua_chave_super_secreta_aqui")
        print("   3. Adicione: ADMIN_PASSWORD=SuaSenhaForteAqui")
        sys.exit(1)
    
    # Verificar se pasta uploads existe
    if not os.path.exists('uploads'):
        print("üìÅ Criando pasta uploads para produ√ß√£o...")
        os.makedirs('uploads', mode=0o755)
        print("‚úÖ Pasta uploads criada")
    
    # Verificar permiss√µes de escrita
    try:
        test_file = os.path.join('uploads', 'test_write.tmp')
        with open(test_file, 'w') as f:
            f.write('test')
        os.remove(test_file)
        print("‚úÖ Permiss√µes de escrita verificadas")
    except Exception as e:
        print(f"üö® ERRO: N√£o √© poss√≠vel escrever na pasta uploads: {e}")
        sys.exit(1)
    
    # Verificar Redis se necess√°rio
    if HAS_SECURITY and security_manager:
        try:
            security_manager.redis_client.ping()
            print("‚úÖ Redis verificado em produ√ß√£o")
        except Exception as e:
            print(f"üö® FALHA: Redis n√£o est√° funcionando: {e}")
            print("üõ†Ô∏è  SOLU√á√ÉO: docker run -d --name redis -p 6379:6379 redis:alpine")
            sys.exit(1)

def create_app():
    app = Flask(__name__)
    
    # ===== CONFIGURA√á√ïES DE PRODU√á√ÉO =====
    app.config['UPLOAD_FOLDER'] = os.path.abspath('uploads')
    app.config['MAX_CONTENT_LENGTH'] = 100 * 1024 * 1024  # 100MB para produ√ß√£o
    app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', os.getenv('JWT_SECRET'))
    
    # JWT obrigat√≥rio para produ√ß√£o
    jwt_secret = os.getenv('JWT_SECRET')
    if not jwt_secret:
        if PRODUCTION_MODE:
            print("üö® FALHA CR√çTICA: JWT_SECRET obrigat√≥rio em produ√ß√£o!")
            sys.exit(1)
        else:
            jwt_secret = 'dev-jwt-secret-alterar-em-producao'
    
    app.config['JWT_SECRET'] = jwt_secret
    app.config['JWT_EXPIRATION_HOURS'] = int(os.getenv('JWT_EXPIRATION_HOURS', '24'))
    
    print(f"‚úÖ JWT configurado para {app.config['JWT_EXPIRATION_HOURS']} horas")
    
    # ===== CRIAR TABELAS DO BANCO =====
    print("üìã Criando/verificando tabelas do banco de dados...")
    try:
        # For√ßar registro do modelo User
        from models.user import User
        User.__table__
        
        # For√ßar registro do modelo Arquivo (CR√çTICO PARA UPLOAD)
        Arquivo.__table__
        print("‚úÖ Modelo Arquivo registrado - Upload funcionar√°")
        
        print(f"üìã Tabelas dispon√≠veis: {list(Base.metadata.tables.keys())}")
        
        # Criar todas as tabelas
        Base.metadata.create_all(bind=engine)
        print("‚úÖ Todas as tabelas criadas/verificadas")
        
        # Criar usu√°rio admin
        if HAS_AUTH:
            print("üë§ Verificando usu√°rio administrador...")
            admin_created = create_default_admin()
            if not admin_created:
                print("‚ö†Ô∏è  Falha ao criar/verificar usu√°rio admin")
                if PRODUCTION_MODE:
                    sys.exit(1)
                    
    except Exception as e:
        print(f"‚ùå Erro cr√≠tico ao criar tabelas: {e}")
        if PRODUCTION_MODE:
            sys.exit(1)
    
    # ===== CONFIGURAR SEGURAN√áA =====
    if HAS_SECURITY and security_manager:
        print("üîê Configurando seguran√ßa para produ√ß√£o...")
        
        try:
            # üö® IMPORTANTE: N√£o chamar setup_simple_cors do sistema de seguran√ßa
            # Vamos configurar CORS manualmente para produ√ß√£o
            print("‚úÖ Sistema de seguran√ßa ativo - configurando CORS manualmente")
            
        except Exception as e:
            print(f"‚ùå Erro ao configurar seguran√ßa: {e}")
            if PRODUCTION_MODE:
                sys.exit(1)
    
    # ===== CORS ESPEC√çFICO PARA PRODU√á√ÉO - VERS√ÉO CORRIGIDA =====
    print("üîê Configurando CORS para PRODU√á√ÉO...")
    
    # üö® CORS CONFIGURADO PARA PRODU√á√ÉO - SIMPLES E FUNCIONAL
    CORS(app,
         origins=[
             "http://localhost:5173",
             "http://127.0.0.1:5173", 
             "http://192.168.1.9:5173",
             "http://localhost:3000",
             "http://127.0.0.1:3000"
         ],
         supports_credentials=True,
         allow_headers=[
             'Content-Type',
             'Authorization', 
             'Accept',
             'Origin',
             'X-Requested-With',
             'Cache-Control'
         ],
         methods=['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'],
         expose_headers=['Content-Disposition'],
         max_age=3600
    )
    print("‚úÖ CORS de produ√ß√£o configurado")
    
    # üö® HANDLER CORS SIMPLES E FUNCIONAL
    @app.before_request
    def handle_cors():
        """Handler CORS para produ√ß√£o"""
        if request.method == 'OPTIONS':
            response = make_response()
            response.headers['Access-Control-Allow-Origin'] = request.headers.get('Origin', '*')
            response.headers['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS, PATCH'
            response.headers['Access-Control-Allow-Headers'] = 'Content-Type, Authorization, Accept, Origin, X-Requested-With'
            response.headers['Access-Control-Allow-Credentials'] = 'true'
            response.headers['Access-Control-Max-Age'] = '3600'
            return response
      
    @app.after_request  
    def add_cors_headers(response):
        """Adicionar headers CORS - PRODU√á√ÉO"""
        origin = request.headers.get('Origin')
        allowed_origins = [
            'http://localhost:5173',
            'http://127.0.0.1:5173', 
            'http://192.168.1.9:5173',
            'http://localhost:3000',
            'http://127.0.0.1:3000'
        ]
        if origin in allowed_origins:
            response.headers['Access-Control-Allow-Origin'] = origin
            response.headers['Access-Control-Allow-Credentials'] = 'true'
        
        # Headers de seguran√ßa para produ√ß√£o
        response.headers['X-Content-Type-Options'] = 'nosniff'
        response.headers['X-Frame-Options'] = 'DENY'
        response.headers['X-XSS-Protection'] = '1; mode=block'
        
        return response
    
    # Garantir que pasta uploads existe
    os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
    print(f"‚úÖ Pasta uploads: {app.config['UPLOAD_FOLDER']}")
    
    # ===== REGISTRAR BLUEPRINTS EM ORDEM DE PRIORIDADE (SEM TESTES INTERNOS) =====
    
    # 1. Autentica√ß√£o (PRIORIDADE M√ÅXIMA)
    if HAS_AUTH:
        app.register_blueprint(auth_bp)
        print("‚úÖ routes.auth registrado")
    elif PRODUCTION_MODE:
        print("üö® ERRO: Autentica√ß√£o obrigat√≥ria em produ√ß√£o!")
        sys.exit(1)
    
    # 2. Rotas banc√°rias e webhooks (se dispon√≠veis)
    if HAS_SECURITY and bank_bp:
        app.register_blueprint(bank_bp)
        print("‚úÖ Rotas banc√°rias registradas")
    
    if HAS_SECURITY and webhook_bp:
        app.register_blueprint(webhook_bp)
        print("‚úÖ Sistema de webhooks registrado")
    
    # 3. Sistema de arquivos (CR√çTICO PARA UPLOAD)
    print("üîß Registrando sistema de arquivos...")

    if HAS_ARQUIVOS_BP:
        # Registrar blueprint original
        app.register_blueprint(arquivos_bp)
        print("‚úÖ routes.arquivos registrado - UPLOAD ATIVO via Blueprint")
    else:
        print("‚ö†Ô∏è routes.arquivos n√£o dispon√≠vel - usando apenas FIX")

    # üöÄ Configurar FIX de upload (sem duplica√ß√£o)
    try:
        setup_upload_routes_fix(app)
        print("‚úÖ FIX DE UPLOAD configurado!")
        
    except Exception as e:
        print(f"‚ùå Erro ao configurar FIX de upload: {e}")
        if PRODUCTION_MODE:
            sys.exit(1)

    # 4. User Settings
    if HAS_USER_SETTINGS_BP and user_settings_bp:
        app.register_blueprint(user_settings_bp)
        print("‚úÖ routes.user_settings registrado")
    
    # 5. Outros blueprints
    if HAS_PROJECT_BP:
        app.register_blueprint(project_bp)
        print("‚úÖ routes.project registrado")
    
    if HAS_CLIENTES_BP:
        app.register_blueprint(clientes_bp)
        print("‚úÖ routes.clientes registrado")
    
    if HAS_CONTAS_BP:
        app.register_blueprint(contas_bp)
        print("‚úÖ routes.contas registrado")
    
    if HAS_FUNCIONARIOS_BP:
        app.register_blueprint(funcionarios_bp)
        print("‚úÖ routes.funcionarios registrado")
    
    if HAS_DASHBOARD_BP:
        app.register_blueprint(dashboard_bp)
        print("‚úÖ routes.dashboard registrado")
    
    # ===== ROTAS ESSENCIAIS DE PRODU√á√ÉO =====
    
    @app.route('/api/health', methods=['GET'])
    def health_check():
        """Health check completo para produ√ß√£o"""
        
        # Teste do banco de dados
        db_status = {
            'connected': False,
            'tables_exist': False,
            'can_query': False,
            'admin_exists': False,
            'error': None
        }
        
        try:
            db = SessionLocal()
            try:
                # Testar conex√£o
                from sqlalchemy import text
                db.execute(text('SELECT 1'))
                db_status['connected'] = True
                
                # Testar tabelas
                tables = list(Base.metadata.tables.keys())
                db_status['tables_exist'] = len(tables) > 0
                db_status['tables'] = tables
                
                # Testar queries
                if HAS_AUTH:
                    user_count = db.query(User).count()
                    db_status['can_query'] = True
                    db_status['user_count'] = user_count
                    
                    # Verificar admin
                    admin = db.query(User).filter(User.role == 'admin').first()
                    db_status['admin_exists'] = admin is not None
                
            finally:
                db.close()
                
        except Exception as e:
            db_status['error'] = str(e)
        
        # Teste do sistema de arquivos
        upload_status = {
            'folder_exists': os.path.exists(app.config['UPLOAD_FOLDER']),
            'writable': False,
            'blueprint_active': HAS_ARQUIVOS_BP,
            'fix_active': True,  # FIX sempre ativo
            'error': None
        }
        
        try:
            test_file = os.path.join(app.config['UPLOAD_FOLDER'], 'health_test.tmp')
            with open(test_file, 'w') as f:
                f.write('test')
            os.remove(test_file)
            upload_status['writable'] = True
        except Exception as e:
            upload_status['error'] = str(e)
        
        # Status geral
        overall_health = (
            db_status['connected'] and
            db_status['can_query'] and
            upload_status['folder_exists'] and
            upload_status['writable']
        )
        
        response_data = {
            'success': overall_health,
            'message': 'API HVAC Produ√ß√£o com FIX' if overall_health else 'API com problemas cr√≠ticos',
            'version': '2.3.1-production-blueprint-fix',
            'mode': 'production' if PRODUCTION_MODE else 'development',
            'timestamp': datetime.now(UTC).isoformat(),
            'database': db_status,
            'file_system': upload_status,
            'features': {
                'authentication': 'ACTIVE' if HAS_AUTH else 'DISABLED',
                'file_upload': 'ACTIVE (BLUEPRINT + FIX)' if HAS_ARQUIVOS_BP else 'ACTIVE (FIX ONLY)',
                'security': 'ACTIVE' if HAS_SECURITY else 'BASIC',
                'user_settings': 'ACTIVE' if HAS_USER_SETTINGS_BP else 'DISABLED',
                'webhooks': 'ACTIVE' if webhook_bp else 'DISABLED'
            },
            'endpoints': {
                'auth': '/api/auth/*' if HAS_AUTH else 'disabled',
                'upload': '/api/arquivos/*',
                'dashboard': '/api/dashboard-data',
                'health': '/api/health',
                'verify_token': '/api/verify-token'
            },
            'critical_paths': {
                'upload_folder': app.config['UPLOAD_FOLDER'],
                'max_file_size': f"{app.config['MAX_CONTENT_LENGTH'] // (1024*1024)}MB"
            }
        }
        
        return jsonify(response_data), 200 if overall_health else 503
    
    @app.route('/api/verify-token', methods=['POST'])
    def verify_token():
        """Verificar token JWT - essencial para produ√ß√£o"""
        try:
            data = request.get_json()
            token = data.get('token') if data else None
            
            if not token:
                auth_header = request.headers.get('Authorization', '')
                if auth_header.startswith('Bearer '):
                    token = auth_header.split(' ')[1]
            
            if not token:
                return jsonify({
                    'success': False,
                    'error': 'Token n√£o fornecido'
                }), 400
            
            # Verificar usando sistema de seguran√ßa ou b√°sico
            if security_manager:
                payload = security_manager.verify_jwt_token(token)
            else:
                # Verifica√ß√£o b√°sica para produ√ß√£o
                import jwt
                try:
                    payload = jwt.decode(token, app.config['JWT_SECRET'], algorithms=['HS256'])
                except Exception:
                    payload = None
            
            if payload and 'user_id' in payload:
                db = SessionLocal()
                try:
                    user = db.query(User).filter(User.id == payload['user_id']).first()
                    if user and user.is_active:
                        return jsonify({
                            'success': True,
                            'user': user.to_dict(),
                            'message': 'Token v√°lido'
                        })
                finally:
                    db.close()
            
            return jsonify({
                'success': False,
                'error': 'Token inv√°lido'
            }), 401
            
        except Exception as e:
            return jsonify({
                'success': False,
                'error': f'Erro na verifica√ß√£o: {str(e)}'
            }), 500
    
    @app.route('/api/dashboard-data', methods=['GET'])
    def dashboard_data():
        """Dados consolidados do dashboard"""
        db = SessionLocal()
        try:
            from sqlalchemy import func
            
            # Estat√≠sticas b√°sicas
            stats = {}
            stats['totalProjects'] = db.query(Projeto).count()
            stats['totalClients'] = db.query(Cliente).count()
            stats['totalBills'] = db.query(Conta).count()
            
            # Arquivos (sempre dispon√≠vel com FIX)
            try:
                stats['totalFiles'] = db.query(Arquivo).count()
            except:
                stats['totalFiles'] = 0
            
            # Receita total
            try:
                receita = db.query(func.sum(Projeto.valor_total)).scalar() or 0
                stats['revenue'] = float(receita)
            except:
                try:
                    receita = db.query(func.sum(Projeto.valor)).scalar() or 0
                    stats['revenue'] = float(receita)
                except:
                    stats['revenue'] = 0.0
            
            # Dados detalhados
            projects = db.query(Projeto).order_by(Projeto.created_at.desc()).limit(10).all()
            clientes = db.query(Cliente).order_by(Cliente.created_at.desc()).limit(50).all()
            bills = db.query(Conta).order_by(Conta.data_vencimento.asc()).limit(20).all()
            
            # Notifica√ß√µes
            try:
                notifications = db.query(Notificacao).order_by(Notificacao.created_at.desc()).limit(10).all()
            except:
                notifications = []
            
            # Arquivos (sempre dispon√≠vel com FIX)
            files = []
            try:
                files = db.query(Arquivo).order_by(Arquivo.created_at.desc()).limit(20).all()
            except:
                files = []
            
            return jsonify({
                'success': True,
                'data': {
                    'stats': stats,
                    'projects': [p.to_dict() for p in projects],
                    'clientes': [c.to_dict() for c in clientes],
                    'bills': [b.to_dict() for b in bills],
                    'notifications': [n.to_dict() for n in notifications],
                    'files': [f.to_dict() for f in files]
                },
                'timestamp': datetime.now(UTC).isoformat(),
                'message': 'Dados carregados com sucesso (com FIX de upload)'
            })
            
        except Exception as e:
            return jsonify({
                'success': False,
                'error': f'Erro ao carregar dados: {str(e)}'
            }), 500
        finally:
            db.close()

    @app.route('/api/dashboard-stats', methods=['GET', 'OPTIONS'])
    def dashboard_stats_compat():  # üîß Nome √∫nico
        """Estat√≠sticas do dashboard - compatibilidade com frontend"""
        if request.method == 'OPTIONS':
            response = make_response()
            response.headers.add("Access-Control-Allow-Origin", request.headers.get('Origin', '*'))
            response.headers.add('Access-Control-Allow-Headers', "Authorization, Content-Type")
            response.headers.add('Access-Control-Allow-Methods', "GET, OPTIONS")
            response.headers.add('Access-Control-Allow-Credentials', 'true')
            return response
        
        # Verificar autentica√ß√£o b√°sica
        auth_header = request.headers.get('Authorization', '')
        if not auth_header.startswith('Bearer '):
            return jsonify({'success': False, 'error': 'Token requerido'}), 401
        
        # Redirecionar para dashboard-data
        return dashboard_data()
    
    @app.route('/api/stats', methods=['GET', 'OPTIONS'])  # üîß Rota alternativa
    def stats_compat():
        """Estat√≠sticas - rota alternativa"""
        if request.method == 'OPTIONS':
            response = make_response()
            response.headers.add("Access-Control-Allow-Origin", request.headers.get('Origin', '*'))
            response.headers.add('Access-Control-Allow-Headers', "Authorization, Content-Type")
            response.headers.add('Access-Control-Allow-Methods', "GET, OPTIONS")
            response.headers.add('Access-Control-Allow-Credentials', 'true')
            return response
        
        return dashboard_data()
    
    # üîß APENAS se n√£o existir blueprint de projetos
    if not HAS_PROJECT_BP:
        @app.route('/api/projects', methods=['GET', 'OPTIONS'])
        def get_projects_fix():
            """Listar projetos - s√≥ se blueprint n√£o existir"""
            if request.method == 'OPTIONS':
                response = make_response()
                response.headers.add("Access-Control-Allow-Origin", request.headers.get('Origin', '*'))
                response.headers.add('Access-Control-Allow-Headers', "Authorization, Content-Type")
                response.headers.add('Access-Control-Allow-Methods', "GET, OPTIONS")
                response.headers.add('Access-Control-Allow-Credentials', 'true')
                return response
            
            try:
                # Verificar autentica√ß√£o b√°sica
                auth_header = request.headers.get('Authorization', '')
                if not auth_header.startswith('Bearer '):
                    return jsonify({'success': False, 'error': 'Token requerido'}), 401
                
                db = SessionLocal()
                try:
                    projects = db.query(Projeto).order_by(Projeto.created_at.desc()).all()
                    
                    return jsonify({
                        'success': True,
                        'data': [p.to_dict() for p in projects],
                        'total': len(projects)
                    })
                finally:
                    db.close()
                    
            except Exception as e:
                return jsonify({
                    'success': False,
                    'error': str(e)
                }), 500
    
    # üîß APENAS se n√£o existir blueprint de clientes
    if not HAS_CLIENTES_BP:
        @app.route('/api/clientes', methods=['GET', 'OPTIONS'])
        def get_clientes_fix():
            """Listar clientes - s√≥ se blueprint n√£o existir"""
            if request.method == 'OPTIONS':
                response = make_response()
                response.headers.add("Access-Control-Allow-Origin", request.headers.get('Origin', '*'))
                response.headers.add('Access-Control-Allow-Headers', "Authorization, Content-Type")
                response.headers.add('Access-Control-Allow-Methods', "GET, OPTIONS")
                response.headers.add('Access-Control-Allow-Credentials', 'true')
                return response
            
            try:
                # Verificar autentica√ß√£o b√°sica
                auth_header = request.headers.get('Authorization', '')
                if not auth_header.startswith('Bearer '):
                    return jsonify({'success': False, 'error': 'Token requerido'}), 401
                
                db = SessionLocal()
                try:
                    clientes = db.query(Cliente).order_by(Cliente.created_at.desc()).all()
                    
                    return jsonify({
                        'success': True,
                        'data': [c.to_dict() for c in clientes],
                        'total': len(clientes)
                    })
                finally:
                    db.close()
                    
            except Exception as e:
                return jsonify({
                    'success': False,
                    'error': str(e)
                }), 500
    
    # ===== TRATAMENTO DE ERROS GLOBAL =====
    @app.errorhandler(404)
    def not_found(error):
        return jsonify({
            'success': False,
            'error': 'Endpoint n√£o encontrado',
            'code': 'NOT_FOUND',
            'message': 'Verifique se est√° usando as rotas corretas: /api/arquivos/*'
        }), 404
    
    @app.errorhandler(413)
    def file_too_large(error):
        return jsonify({
            'success': False,
            'error': f'Arquivo muito grande. M√°ximo: {app.config["MAX_CONTENT_LENGTH"] // (1024*1024)}MB',
            'code': 'FILE_TOO_LARGE'
        }), 413
    
    @app.errorhandler(500)
    def internal_error(error):
        return jsonify({
            'success': False,
            'error': 'Erro interno do servidor',
            'code': 'INTERNAL_ERROR'
        }), 500
    # ===== ROTAS DE COMPATIBILIDADE PARA O FRONTEND =====
    
    @app.route('/api/dashboard-stats', methods=['GET', 'OPTIONS'])
    def dashboard_stats():
        """Estat√≠sticas do dashboard - compatibilidade com frontend"""
        if request.method == 'OPTIONS':
            response = make_response()
            response.headers.add("Access-Control-Allow-Origin", request.headers.get('Origin', '*'))
            response.headers.add('Access-Control-Allow-Headers', "Authorization, Content-Type")
            response.headers.add('Access-Control-Allow-Methods', "GET, OPTIONS")
            response.headers.add('Access-Control-Allow-Credentials', 'true')
            return response
        
        # Verificar autentica√ß√£o b√°sica
        auth_header = request.headers.get('Authorization', '')
        if not auth_header.startswith('Bearer '):
            return jsonify({'success': False, 'error': 'Token requerido'}), 401
        
        # Redirecionar para dashboard-data
        return dashboard_data()
    
    @app.route('/api/projects', methods=['GET', 'OPTIONS'])
    def get_projects_compat():
        """Listar projetos - compatibilidade com frontend"""
        if request.method == 'OPTIONS':
            response = make_response()
            response.headers.add("Access-Control-Allow-Origin", request.headers.get('Origin', '*'))
            response.headers.add('Access-Control-Allow-Headers', "Authorization, Content-Type")
            response.headers.add('Access-Control-Allow-Methods', "GET, OPTIONS")
            response.headers.add('Access-Control-Allow-Credentials', 'true')
            return response
        
        try:
            # Verificar autentica√ß√£o b√°sica
            auth_header = request.headers.get('Authorization', '')
            if not auth_header.startswith('Bearer '):
                return jsonify({'success': False, 'error': 'Token requerido'}), 401
            
            db = SessionLocal()
            try:
                projects = db.query(Projeto).order_by(Projeto.created_at.desc()).all()
                
                return jsonify({
                    'success': True,
                    'data': [p.to_dict() for p in projects],
                    'total': len(projects)
                })
            finally:
                db.close()
                
        except Exception as e:
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    @app.route('/api/clientes', methods=['GET', 'OPTIONS'])
    def get_clientes_compat():
        """Listar clientes - compatibilidade com frontend"""
        if request.method == 'OPTIONS':
            response = make_response()
            response.headers.add("Access-Control-Allow-Origin", request.headers.get('Origin', '*'))
            response.headers.add('Access-Control-Allow-Headers', "Authorization, Content-Type")
            response.headers.add('Access-Control-Allow-Methods', "GET, OPTIONS")
            response.headers.add('Access-Control-Allow-Credentials', 'true')
            return response
        
        try:
            # Verificar autentica√ß√£o b√°sica
            auth_header = request.headers.get('Authorization', '')
            if not auth_header.startswith('Bearer '):
                return jsonify({'success': False, 'error': 'Token requerido'}), 401
            
            db = SessionLocal()
            try:
                clientes = db.query(Cliente).order_by(Cliente.created_at.desc()).all()
                
                return jsonify({
                    'success': True,
                    'data': [c.to_dict() for c in clientes],
                    'total': len(clientes)
                })
            finally:
                db.close()
                
        except Exception as e:
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    return app

if __name__ == '__main__':
    print("\n" + "="*60)
    print("üöÄ INICIANDO API HVAC - VERS√ÉO PRODU√á√ÉO COM FIX DE UPLOAD")
    print("="*60)
    
    # Valida√ß√µes finais cr√≠ticas
    if not HAS_AUTH:
        print("üö® FALHA CR√çTICA: Sistema de autentica√ß√£o obrigat√≥rio!")
        sys.exit(1)
    
    # Com FIX, upload sempre funcionar√°
    print("‚úÖ Upload GARANTIDO pelo FIX direto!")
    
    # Inicializar sistema de autentica√ß√£o
    if initialize_auth_system:
        try:
            auth_ok = initialize_auth_system()
            if auth_ok:
                print("‚úÖ Sistema de autentica√ß√£o inicializado")
            else:
                print("‚ùå Falha na inicializa√ß√£o da autentica√ß√£o")
                if PRODUCTION_MODE:
                    sys.exit(1)
        except Exception as e:
            print(f"‚ùå Erro na autentica√ß√£o: {e}")
            if PRODUCTION_MODE:
                sys.exit(1)
    
    try:
        app = create_app()
        
        print("\nüìã STATUS FINAL:")
        print(f"‚úÖ Modo: {'PRODU√á√ÉO' if PRODUCTION_MODE else 'DESENVOLVIMENTO'}")
        print(f"‚úÖ Autentica√ß√£o: {'ATIVA' if HAS_AUTH else 'INATIVA'}")
        print(f"‚úÖ Sistema de Arquivos: {'BLUEPRINT + FIX' if HAS_ARQUIVOS_BP else 'FIX APENAS'}")
        print(f"‚úÖ Seguran√ßa: {'ATIVA' if HAS_SECURITY else 'B√ÅSICA'}")
        print(f"‚úÖ Configura√ß√µes: {'ATIVO' if HAS_USER_SETTINGS_BP else 'INATIVO'}")
        
        # üîç VERIFICAR ROTAS REGISTRADAS (SEM EXECUTAR REQUEST)
        print("\nüìã ROTAS DE ARQUIVOS REGISTRADAS:")
        for rule in app.url_map.iter_rules():
            if '/api/arquivos' in rule.rule:
                print(f"   {rule.methods} {rule.rule}")
        
        print("\nüìç ENDPOINTS CR√çTICOS (GARANTIDOS):")
        print("‚ù§Ô∏è  Health Check: http://localhost:5000/api/health")
        print("üìä Dashboard: http://localhost:5000/api/dashboard-data")
        print("üîë Login: http://localhost:5000/api/auth/login")
        print("üì§ Upload: http://localhost:5000/api/arquivos/upload")
        print("üìÇ Listar Arquivos: http://localhost:5000/api/arquivos")
        print("üóëÔ∏è Deletar: http://localhost:5000/api/arquivos/<id>")
        print("üì• Download: http://localhost:5000/api/arquivos/<id>/download")
        print("üîç Debug Routes: http://localhost:5000/api/debug/routes")
        
        print("\nüë§ CREDENCIAIS PADR√ÉO:")
        admin_password = os.getenv('ADMIN_PASSWORD', 'HvacAdmin2024!')
        print(f"   Username: admin")
        print(f"   Password: {admin_password}")
        print("üîê ALTERE A SENHA AP√ìS PRIMEIRO LOGIN!")
        
        print("\nüîß TESTES R√ÅPIDOS:")
        print("   curl http://localhost:5000/api/health")
        print("   curl http://localhost:5000/api/debug/routes")
        
        print("\n" + "="*60)
        print("üéâ SISTEMA PRONTO PARA PRODU√á√ÉO!")
        print("üöÄ UPLOAD DE ARQUIVOS GARANTIDO!")
        print("üîê AUTENTICA√á√ÉO OBRIGAT√ìRIA ATIVA!")
        print("üìÅ ROTAS REGISTRADAS SEM CONFLITO!")
        print("‚úÖ BLUEPRINT REGISTRATION CORRIGIDO!")
        print("="*60)
        
        # Iniciar servidor
        port = int(os.getenv('PORT', 5000))
        host = os.getenv('HOST', '0.0.0.0')
        
        app.run(
            debug=False,  # üö® SEMPRE FALSE EM PRODU√á√ÉO
            host=host,
            port=port,
            use_reloader=False,  # üö® SEMPRE FALSE EM PRODU√á√ÉO
            threaded=True  # Para suportar m√∫ltiplas conex√µes
        )
        
    except Exception as e:
        print(f"\nüö® FALHA CR√çTICA NA INICIALIZA√á√ÉO: {e}")
        print("\nüîß CHECKLIST DE PRODU√á√ÉO:")
        print("   ‚ùå Vari√°vel JWT_SECRET definida?")
        print("   ‚ùå Banco de dados acess√≠vel?")
        print("   ‚ùå Pasta uploads/ existe com permiss√µes?")
        print("   ‚ùå Redis funcionando (se usando seguran√ßa avan√ßada)?")
        print("   ‚ùå Depend√™ncias instaladas?")
        
        print("\nüí° SOLU√á√ïES R√ÅPIDAS:")
        print("   üîß Criar .env: echo 'JWT_SECRET=sua_chave_secreta' > .env")
        print("   üìÅ Criar pasta: mkdir -p uploads && chmod 755 uploads")
        print("   üì¶ Instalar deps: pip install bcrypt structlog werkzeug")
        print("   üê≥ Redis: docker run -d --name redis -p 6379:6379 redis:alpine")
        
        print(f"\nüìã ERRO DETALHADO: {str(e)}")
        sys.exit(1)